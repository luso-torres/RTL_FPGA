

// TOOL:     vlog2tf
// DATE:     Wed Jul 02 21:16:58 2025
 
// TITLE:    Lattice Semiconductor Corporation
// MODULE:   topmodule_uart
// DESIGN:   topmodule_uart
// FILENAME: topmodule_uart_tf.v
// PROJECT:  UART
// VERSION:  2.0
// This file is auto generated by Diamond


`timescale 1 ns / 1 ps

// Define Module for Test Fixture
module topmodule_uart_tf();

// Inputs
    reg clk;
    reg reset;
    reg [7:0] data_in;
    reg tx_start;


// Outputs
    wire tx_done;
    wire [7:0] data_out;
    wire rx_done;


// Bidirs


// Instantiate the UUT
// Please check and add your parameters manually
    topmodule_uart UUT (
        .clk(clk), 
        .reset(reset), 
        .data_in(data_in), 
        .tx_start(tx_start), 
        .tx_done(tx_done), 
        .data_out(data_out), 
        .rx_done(rx_done)
        );

// Geracao de clock
    always #10 clk = ~clk; // Clock de 50 MHz

    // Variavel auxiliar para o baud rate
    localparam BAUD_PERIOD = 104160; // 1/9600 s em nanossegundos

// Initialize Inputs
// You can add your stimulus here
    // Inicializa os sinais
	
    initial begin	
        clk = 0;
        reset = 1;
        tx_start = 0;
        data_in = 8'h00;

        $display("Iniciando o Testbench do UART TX...");

        // Libera o reset apos alguns ciclos de clock
        #20 reset = 0;

        // Teste 1: Envia o dado 8'hA5
        send_byte(8'hA5);

        // Teste 2: Reinicia durante a transmissao
        #50 reset = 1;
        #20 reset = 0;

        // Teste 3: Envia multiplos dados consecutivamente
        send_byte(8'h3C);
        send_byte(8'hFF);
        send_byte(8'h00);

        // Finaliza a simulacao
        $display("Testbench concluido!");
        $stop;
    end

    // Tarefa para enviar um byte
    task send_byte(input [7:0] byte);
        begin
            $display("Enviando dado: %h", byte);
            data_in = byte;
            tx_start = 1;
            #20 tx_start = 0;

            // Aguarda a transmissao completar
            wait (tx_done);

            // Verifica o tempo de transmissao
            #(10 * BAUD_PERIOD); // Aproximadamente 10 bits (start, 8 dados, stop)
            $display("Dado %h transmitido com sucesso.", byte);
        end
    endtask

    // Monitoramento dos sinais
    initial begin
        $monitor("Time = %0t, reset = %b, data_in = %h, tx_start = %b, tx = %b, tx_done = %b, state = %d", 
                 $time, reset, data_in, tx_start, tx, tx_done, uut.state);
    end

endmodule // topmodule_uart_tf